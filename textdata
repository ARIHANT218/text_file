OOPS --
1....

1. Polymorphism  : It is the concept of oops. Polymorphism is the ability of a single function and methos or operator behave differently
based of the input .
Type of polymorphism :
1. Compile time ploy  2. run time ploy
Compile time polymorphism --Occur when the method to be executed is determined at compile time. ususallly operator overloading ..
run time ploy -- Occurs when the method to be executed is determined at run time ploy .

Inheritance : It is the concept of oops . When derive class access the property and charac  of the parent class is known as inheritance.
 In java Multiple inheritance is not possible . Using interface can be implement multpile inheritance . 

Interafce is just like a class , which contains the abstract methods and variables . 

Encapsulation : it is the concept of oops .  Encapsulation  wrapped the method and variables into the single unit . AND ALSO HIDING THE DATA FROM USER
 . BY DECLARE  THE CLASS WRAAPED  THE METHOS AND VARIABLES AND USING MODIFIER LIKE PRIVATE AND PROTECT 
EASLY HIDE THE DATA FROM USER .


Abstraction in Java : IT HIDING THE INTERNAL IMPLEMENTATION DETAILS AND SHOWONLY ESSENTIAL DETILS TO THE USER.
IN JAVA TWO WAYS ARE POSSIBLE ...
1. INTERFACE  2.  ABSTRACT CLASSES.  ... RFEAL LIFE EXAMPLE IS TV AND BUTTON

----
2...
What is computer network? 
COMPUETR NETWORK IS THE SYSTEM WHERE TWO OR MORE  COMPUTERS AND DEVICES ARE CONNECTED TO  SHARE  DATA , RESOUCES , AND COMMUNICATE.
These devices communicate using wired (Ethernet cables) or wireless (Wi-Fi, Bluetooth) connections.

Types of Computer Networks:

LAN (Local Area Network) – Connects devices within a limited area (e.g., home, office).
WAN (Wide Area Network) – Covers large geographical areas (e.g., the internet).
MAN (Metropolitan Area Network) – Connects multiple LANs within a city.
PAN (Personal Area Network) – A small network for personal devices (e.g., Bluetooth).

 ----
3...

What is an IP Address?
IP adddress or Internet Protocols address is unique identifier which is assign to each devices connected to the network.

there are two version of IP add.
- IPv4 -- 32 bit  , IPV6  -- 128 bit 


4...
What is a VPN?
Virtual Private Network is create a secure connection over a network bew the your device and another device network .
it encurpts the data so that unorthised user is not directly access the information.

-----

Structure...
DNS .. DOMAIN NAME SYSTEM... USED FOR FIND THE IP address of Server.. Basically Browse jse the dns request to finding the server ip address and then send a request to server


class Solution {
    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {
        int n = fruits.length;
        boolean[] used = new boolean[n]; // Mark used baskets
        int unplaced = 0;

        for (int i = 0; i < n; i++) {
            boolean placed = false;
            for (int j = 0; j < n; j++) {
                if (!used[j] && baskets[j] >= fruits[i]) {
                    used[j] = true; // Assign basket
                    placed = true;
                    break;
                }
            }
            if (!placed) {
                unplaced++;
            }
        }

        return unplaced;
    }
}
-----

✅ Problem Statement Summary
Rules:

Each fruit must be placed in the leftmost basket that can fit it.

Once a basket is used, it cannot be reused.

If a fruit can't be placed in any basket, it is unplaced.
code: 

int n = fruits.length;
boolean[] used = new boolean[n]; 

int unplaced = 0;

for (int i = 0; i < n; i++) {
    boolean placed = false;
    for (int j = 0; j < n; j++) {
        if (!used[j] && baskets[j] >= fruits[i]) {
            used[j] = true;
            placed = true;
            break;
        }
  if (!placed) {
      unplaced++;
  }

 return unplaced;
TC -- O(n2);
optimise..

public class Solution {
    int[] tree;
    int n;

    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {
        n = baskets.length;
        tree = new int[4 * n];
        build(baskets, 0, 0, n - 1);

        int unplaced = 0;
        for (int fruit : fruits) {
            int index = query(0, 0, n - 1, fruit);
            if (index == -1) {
                unplaced++;
            } else {
                update(0, 0, n - 1, index, -1); // mark as used
            }
        }
        return unplaced;
    }

    // Build segment tree
    private void build(int[] baskets, int node, int l, int r) {
        if (l == r) {
            tree[node] = baskets[l];
            return;
        }
        int mid = (l + r) / 2;
        build(baskets, 2 * node + 1, l, mid);
        build(baskets, 2 * node + 2, mid + 1, r);
        tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
    }

    // Query leftmost index with value >= val
    private int query(int node, int l, int r, int val) {
        if (tree[node] < val) return -1;
        if (l == r) return l;

        int mid = (l + r) / 2;
        int left = query(2 * node + 1, l, mid, val);
        if (left != -1) return left;
        return query(2 * node + 2, mid + 1, r, val);
    }

    // Update a basket to mark it as used
    private void update(int node, int l, int r, int idx, int value) {
        if (l == r) {
            tree[node] = value;
            return;
        }
        int mid = (l + r) / 2;
        if (idx <= mid) update(2 * node + 1, l, mid, idx, value);
        else update(2 * node + 2, mid + 1, r, idx, value);

        tree[node] = Math.max(tree[2 * node + 1], tree[2 * node + 2]);
    }






